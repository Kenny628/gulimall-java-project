/*
 * Created on 2024-05-02 ( 14:45:35 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com._yzhheng.rest.services;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com._yzhheng.persistence.entities.PmsCategory;
import com._yzhheng.persistence.repositories.PmsCategoryRepository;
import com._yzhheng.rest.dto.PmsCategoryDTO;
import com._yzhheng.rest.services.commons.GenericService;
import com._yzhheng.web.Catelog2Vo;
import org.springframework.data.redis.core.StringRedisTemplate;

/**
 * REST service for entity "PmsCategory" <br>
 * 
 * This service provides all the necessary operations required by the REST
 * controller <br>
 * 
 * @author Telosys
 *
 */
@Service
public class PmsCategoryService extends GenericService<PmsCategory, PmsCategoryDTO> {

	private static final Logger logger = LoggerFactory.getLogger(PmsCategoryService.class);

	private final PmsCategoryRepository repository; // injected by constructor

	@Autowired
	private StringRedisTemplate redisTemplate;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */
	public PmsCategoryService(PmsCategoryRepository repository) {
		super(PmsCategory.class, PmsCategoryDTO.class);
		this.repository = repository;
	}

	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Long getEntityId(PmsCategoryDTO dto) {
		return dto.getCatId();
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<PmsCategoryDTO> findAll() {
		logger.debug("findAll()");
		Iterable<PmsCategory> all = repository.findAll();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param catId
	 * @return the entity or null if not found
	 */
	public PmsCategoryDTO findById(Long catId) {
		Long entityId = catId;
		logger.debug("findById({})", entityId);
		Optional<PmsCategory> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param catId
	 * @param dto
	 */
	public void save(Long catId, PmsCategoryDTO dto) {
		Long entityId = catId;
		logger.debug("save({},{})", entityId, dto);
		// force PK in DTO (just to be sure to conform with the given PK)
		dto.setCatId(catId);
		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(PmsCategoryDTO dto) {
		logger.debug("update({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param catId
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Long catId, PmsCategoryDTO dto) {
		Long entityId = catId;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		Optional<PmsCategory> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			PmsCategory entity = optionalEntity.get();
			// implement here the partial update
			// entity.setXxx(dto.getXxx());
			// etc ...
			repository.save(entity);
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(PmsCategoryDTO dto) {
		logger.debug("create({})", dto);
		// auto-generated Primary Key
		repository.save(dtoToEntity(dto));
		return true; // always created
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param catId
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Long catId) {
		Long entityId = catId;
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	public List<PmsCategoryDTO> listWithTree() {
		List<PmsCategory> categoryList = repository.findAll();

		List<PmsCategory> level1Menus = categoryList
				.stream()
				.filter(categoryEntity -> categoryEntity.getParentCid() == 0).map((menu) -> {
					menu.setChildren(getChildrens(menu, categoryList));
					return menu;
				}).sorted((menu1, menu2) -> {
					return (menu1.getSort() == null ? 0 : menu1.getSort())
							- (menu2.getSort() == null ? 0 : menu2.getSort());
				}).collect(Collectors.toList());
		return entityListToDtoList(level1Menus);
	}

	private List<PmsCategory> getChildrens(PmsCategory root, List<PmsCategory> all) {

		List<PmsCategory> children = all.stream().filter(categoryEntity -> {
			return categoryEntity.getParentCid() == root.getCatId();
		}).map(categoryEntity -> {
			// 1、找到子菜单
			categoryEntity.setChildren(getChildrens(categoryEntity, all));
			return categoryEntity;
		}).sorted((menu1, menu2) -> {
			// 2、菜单的排序
			return (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort());
		}).collect(Collectors.toList());

		return children;
	}

	public List<PmsCategory> getLevel1Category() {
		return repository.getLevel1Category();
	}

	public List<PmsCategory> getAllCategories() {
		return repository.getAllCategories();
	}

	private List<PmsCategory> getParentCid(List<PmsCategory> list, Long parentCid) {

		return list.stream().filter(v -> v.getParentCid() == parentCid).collect(Collectors.toList());
	}

	public Map<String, List<Catelog2Vo>> getCatalogJson() {
		String catelogJson = redisTemplate.opsForValue().get("catelogJson");
		if (StringUtils.isEmpty(catelogJson)) {
			// 缓存中没有，查询数据库
			System.out.println("缓存不命中...将要查询数据库...");
			return getCatalogJsonFromDb();
		}

		else {
			System.out.println("缓存命中....直接返回....");
			// 给缓存中放json字符串，拿到的json字符串，还要逆转为能用的对象类型。【序列化与反序列化】
			// 转为我们指定的对象返回
			Map<String, List<Catelog2Vo>> result = JSON.parseObject(catelogJson,
					new TypeReference<Map<String, List<Catelog2Vo>>>() {
					});
			return result;
		}
	}

	public Map<String, List<Catelog2Vo>> getCatalogJsonFromDb() {
		List<PmsCategory> allCategories = getAllCategories();
		List<PmsCategory> level1Categories = getLevel1Category();
		Map<String, List<Catelog2Vo>> mapOfCategories = level1Categories.stream()
				.collect(Collectors.toMap(k -> k.getCatId().toString(), v -> {

					List<PmsCategory> level2CategoriesOfCurrentLevel1 = getParentCid(allCategories, v.getCatId());
					List<Catelog2Vo> catelog2Vos = null;
					if (level2CategoriesOfCurrentLevel1 != null) {
						catelog2Vos = level2CategoriesOfCurrentLevel1.stream().map(L2 -> {
							Catelog2Vo catelog2Vo = new Catelog2Vo(v.getCatId().toString(), null,
									L2.getCatId().toString(),
									L2.getName());
							List<PmsCategory> level3CategoriesOfCurrentLevel2 = getParentCid(allCategories,
									L2.getCatId());
							List<Catelog2Vo.catelog3Vo> catelog3Vo = level3CategoriesOfCurrentLevel2.stream().map(
									l3 -> {
										Catelog2Vo.catelog3Vo collect = new Catelog2Vo.catelog3Vo(
												l3.getCatId().toString(),
												l3.getCatId().toString(), l3.getName());
										return collect;
									}).collect(Collectors.toList());
							catelog2Vo.setCatalog3List(catelog3Vo);
							return catelog2Vo;
						}).collect(Collectors.toList());
					}
					return catelog2Vos;
				}));
		String s = JSON.toJSONString(mapOfCategories);
		redisTemplate.opsForValue().set("catelogJson", s, 1, TimeUnit.DAYS);
		return mapOfCategories;
	}

	// -----------------------------------------------------------------------------------------
	// Specific "finders"
	// -----------------------------------------------------------------------------------------
	/***
	 * public List<PmsCategoryDTO> findByTitle(String title) {
	 * logger.debug("findByTitle({})", title);
	 * // List<PmsCategory> list = repository.findByTitle(title);
	 * List<PmsCategory> list = repository.findByTitleContaining(title);
	 * return entityListToDtoList(list);
	 * }
	 * 
	 * public List<PmsCategoryDTO> findByPrice(BigDecimal price) {
	 * logger.debug("findByPrice({})", price);
	 * // List<PmsCategory> list = repository.findByTitle(title);
	 * List<PmsCategory> list = repository.findByPrice(price);
	 * return entityListToDtoList(list);
	 * }
	 * 
	 * public List<PmsCategoryDTO> findByTitleAndPrice(String title, BigDecimal
	 * price) {
	 * logger.debug("findByTitleAndPrice({}, {})", title, price);
	 * List<PmsCategory> list = repository.findByTitleContainingAndPrice(title,
	 * price);
	 * return entityListToDtoList(list);
	 * }
	 ***/
}
