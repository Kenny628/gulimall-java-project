/*
 * Created on 2024-05-02 ( 14:45:36 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com._yzhheng.rest.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com._yzhheng.persistence.entities.PmsSkuImages;
import com._yzhheng.persistence.entities.PmsSkuInfo;
import com._yzhheng.persistence.entities.PmsSpuInfoDesc;
import com._yzhheng.persistence.repositories.PmsAttrGroupRepository;
import com._yzhheng.persistence.repositories.PmsSkuImagesRepository;
import com._yzhheng.persistence.repositories.PmsSkuInfoRepository;
import com._yzhheng.persistence.repositories.PmsSpuInfoDescRepository;
import com._yzhheng.rest.databaseDto.AttrDto;
import com._yzhheng.rest.databaseDto.PmsSkuItemSaleAttrVo;
import com._yzhheng.rest.databaseDto.SaleVoWihtSkuIds;
import com._yzhheng.rest.databaseDto.SpuItemAttrGroupDto;
import com._yzhheng.rest.dto.PmsSkuInfoDTO;
import com._yzhheng.rest.dto.databaseSpuDto;
import com._yzhheng.rest.services.commons.GenericService;
import com._yzhheng.vo.SkuItemVo;
// import com._yzhheng.vo.SkuItemVo.SpuItemBaseAttrVo;
import com.alibaba.cloud.commons.lang.StringUtils;

/**
 * REST service for entity "PmsSkuInfo" <br>
 * 
 * This service provides all the necessary operations required by the REST
 * controller <br>
 * 
 * @author Telosys
 *
 */
@Service
public class PmsSkuInfoService extends GenericService<PmsSkuInfo, PmsSkuInfoDTO> {

	private static final Logger logger = LoggerFactory.getLogger(PmsSkuInfoService.class);

	private final PmsSkuInfoRepository repository; // injected by constructor

	private final PmsSkuImagesRepository SkuImageRepo;

	private final PmsSpuInfoDescRepository SpuInfoDescRepo;

	private final PmsAttrGroupRepository attrGroupRepository;

	@Autowired
	ThreadPoolExecutor executor;

	/**
	 * Constructor (usable for Dependency Injection)
	 * 
	 * @param repository the repository to be injected
	 */
	public PmsSkuInfoService(PmsSkuInfoRepository repository, PmsSkuImagesRepository skuImageRepo,
			PmsSpuInfoDescRepository spuInfoDescRepo, PmsAttrGroupRepository attrGroupRepository) {
		super(PmsSkuInfo.class, PmsSkuInfoDTO.class);
		this.repository = repository;
		this.SkuImageRepo = skuImageRepo;
		this.SpuInfoDescRepo = spuInfoDescRepo;
		this.attrGroupRepository = attrGroupRepository;
	}

	/**
	 * Returns the entity ID object from the given DTO
	 *
	 * @param dto
	 * @return
	 */
	private Long getEntityId(PmsSkuInfoDTO dto) {
		return dto.getSkuId();
	}

	/**
	 * Finds all occurrences of the entity
	 *
	 * @return
	 */
	public List<PmsSkuInfoDTO> findAll() {
		logger.debug("findAll()");
		Iterable<PmsSkuInfo> all = repository.findAllWithRandom();
		return entityListToDtoList(all);
	}

	/**
	 * Finds the entity identified by the given PK
	 *
	 * @param skuId
	 * @return the entity or null if not found
	 */
	public PmsSkuInfoDTO findById(Long skuId) {
		Long entityId = skuId;
		logger.debug("findById({})", entityId);
		Optional<PmsSkuInfo> optionalEntity = repository.findById(entityId);
		return entityToDto(optionalEntity);
	}

	/**
	 * Saves the given entity with the given PK <br>
	 * "UPSERT" operation (updated if it exists or created if it does not exist)
	 *
	 * @param skuId
	 * @param dto
	 */
	public void save(Long skuId, PmsSkuInfoDTO dto) {
		Long entityId = skuId;
		logger.debug("save({},{})", entityId, dto);
		// force PK in DTO (just to be sure to conform with the given PK)
		dto.setSkuId(skuId);
		repository.save(dtoToEntity(dto));
	}

	/**
	 * Updates the given entity if it exists
	 *
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean update(PmsSkuInfoDTO dto) {
		logger.debug("update({})", dto);
		if (repository.existsById(getEntityId(dto))) {
			repository.save(dtoToEntity(dto));
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Updates partially the given entity if it exists
	 *
	 * @param skuId
	 * @param dto
	 * @return true if updated, false if not found
	 */
	public boolean partialUpdate(Long skuId, PmsSkuInfoDTO dto) {
		Long entityId = skuId;
		logger.debug("partialUpdate({}, {})", entityId, dto);
		Optional<PmsSkuInfo> optionalEntity = repository.findById(entityId);
		if (optionalEntity.isPresent()) {
			PmsSkuInfo entity = optionalEntity.get();
			// implement here the partial update
			// entity.setXxx(dto.getXxx());
			// etc ...
			repository.save(entity);
			return true; // find and updated
		} else {
			return false; // not found (not updated)
		}
	}

	/**
	 * Creates the given entity
	 *
	 * @param dto
	 * @return true if created, false if already exists
	 */
	public boolean create(PmsSkuInfoDTO dto) {
		logger.debug("create({})", dto);
		// auto-generated Primary Key
		repository.save(dtoToEntity(dto));
		return true; // always created
	}

	/**
	 * Deletes an entity by its PK
	 *
	 * @param skuId
	 * @return true if deleted, false if not found
	 */
	public boolean deleteById(Long skuId) {
		Long entityId = skuId;
		logger.debug("deleteById({})", entityId);
		if (repository.existsById(entityId)) {
			repository.deleteById(entityId);
			return true; // find and deleted
		} else {
			return false; // not found (not deleted)
		}
	}

	public SkuItemVo item(Long skuId) throws InterruptedException, ExecutionException {
		// TODO: clean the commented part in completableFuture task
		SkuItemVo skuItemVo = new SkuItemVo();
		// 1. sku 基本信息获取
		CompletableFuture<PmsSkuInfo> infoFuture = CompletableFuture.supplyAsync(() -> {
			PmsSkuInfo info = repository.findById(skuId).get();
			skuItemVo.setInfo(info);
			return info;
		}, executor);
		// PmsSkuInfo info = repository.findById(skuId).get();
		// skuItemVo.setInfo(info);
		// System.out.println(pmsSpuInfoDesc.getDecript());

		// 2. sku 的图片基本信息
		CompletableFuture<Void> skuImageFuture = CompletableFuture.runAsync(() -> {
			List<PmsSkuImages> images = SkuImageRepo.getImagesBySkuId(skuId);
			// System.out.println(images.getFirst().getImgUrl());
			skuItemVo.setImages(images);
		}, executor);
		// List<PmsSkuImages> images = SkuImageRepo.getImagesBySkuId(skuId);
		// System.out.println(images.getFirst().getImgUrl());
		// skuItemVo.setImages(images);

		// 3. 获取spu的介绍
		CompletableFuture<Void> spuDescriptionFuture = infoFuture.thenAcceptAsync((res) -> {
			PmsSpuInfoDesc pmsSpuInfoDesc = SpuInfoDescRepo.findById(res.getSpuId()).get();
			skuItemVo.setDesc(pmsSpuInfoDesc);
		}, executor);
		// PmsSpuInfoDesc pmsSpuInfoDesc =
		// SpuInfoDescRepo.findById(info.getSpuId()).get();
		// skuItemVo.setDesc(pmsSpuInfoDesc);

		// System.out.println(pmsSpuInfoDesc.getDecript());
		// List<SpuItemAttrGroupDto> groupAttrs =
		// attrGroupRepository.getAttrGroupWithAttrsBySpuId(info.getSpuId(),
		// info.getCatalogId());

		// 4. spu规格参数信息
		CompletableFuture<Void> spuSpecificationFuture = infoFuture.thenAcceptAsync((res -> {
			List<Object[]> results = attrGroupRepository.findAttrGroupWithAttrsBySpuId(res.getSpuId(),
					res.getCatalogId());

			Map<String, SpuItemAttrGroupDto> groupMap = new HashMap<>();
			for (Object[] result : results) {
				String groupName = (String) result[0];
				Long attrId = (Long) result[1];
				String attrName = (String) result[2];
				String attrValue = (String) result[3];

				groupMap.putIfAbsent(groupName, new SpuItemAttrGroupDto(groupName, new ArrayList<>()));
				groupMap.get(groupName).getAttrs().add(new AttrDto(attrId, attrName, attrValue));
			}

			List<SpuItemAttrGroupDto> groupAttrs = new ArrayList<>(groupMap.values());

			skuItemVo.setGroupAttrs(groupAttrs);

			// for (SpuItemAttrGroupDto g : groupAttrs) {
			// System.out.print(g.getGroupName() + " ");
			// for (AttrDto g2 : g.getAttrs()) {
			// System.out.print(g2.getAttrName() + " " + g2.getAttrValue());
			// }
			// System.out.println();
			// }
		}), executor);
		// List<Object[]> results =
		// attrGroupRepository.findAttrGroupWithAttrsBySpuId(info.getSpuId(),
		// info.getCatalogId());

		// Map<String, SpuItemAttrGroupDto> groupMap = new HashMap<>();
		// for (Object[] result : results) {
		// String groupName = (String) result[0];
		// Long attrId = (Long) result[1];
		// String attrName = (String) result[2];
		// String attrValue = (String) result[3];

		// groupMap.putIfAbsent(groupName, new SpuItemAttrGroupDto(groupName, new
		// ArrayList<>()));
		// groupMap.get(groupName).getAttrs().add(new AttrDto(attrId, attrName,
		// attrValue));
		// }

		// List<SpuItemAttrGroupDto> groupAttrs = new ArrayList<>(groupMap.values());

		// skuItemVo.setGroupAttrs(groupAttrs);

		// for (SpuItemAttrGroupDto g : groupAttrs) {
		// System.out.print(g.getGroupName() + " ");
		// for (AttrDto g2 : g.getAttrs()) {
		// System.out.print(g2.getAttrName() + " " + g2.getAttrValue());
		// }
		// System.out.println();
		// }

		// 5. spu销售属性
		CompletableFuture<Void> spuSaleAttributeFuture = infoFuture.thenAcceptAsync((res) -> {
			List<Object[]> saleAttrVos = repository.getSaleAttrBySpuId(res.getSpuId());
			List<PmsSkuItemSaleAttrVo> vo = new ArrayList<>();
			Map<String, List<SaleVoWihtSkuIds>> map = new HashMap<>();
			for (Object[] o : saleAttrVos) {
				// Long attrId = (Long) o[0];
				String attrName = (String) o[0];
				String attrValues = (String) o[1];
				String skuIds = (String) o[2];
				map.putIfAbsent(attrName, new ArrayList<>());
				if (map.containsKey(attrName)) {
					map.get(attrName).add(new SaleVoWihtSkuIds(attrValues, skuIds));
				}
				// vo.add(new PmsSkuItemSaleAttrVo(attrName, attrValues, skuIds));
			}
			for (var entry : map.entrySet()) {
				vo.add(new PmsSkuItemSaleAttrVo(entry.getKey(), entry.getValue()));
				// System.out.println(entry.getKey() + "/" + entry.getValue());
			}
			skuItemVo.setSaleAttr(vo);
		}, executor);
		// List<Object[]> saleAttrVos = repository.getSaleAttrBySpuId(info.getSpuId());
		// List<PmsSkuItemSaleAttrVo> vo = new ArrayList<>();
		// Map<String, List<SaleVoWihtSkuIds>> map = new HashMap<>();
		// for (Object[] o : saleAttrVos) {
		// // Long attrId = (Long) o[0];
		// String attrName = (String) o[0];
		// String attrValues = (String) o[1];
		// String skuIds = (String) o[2];
		// map.putIfAbsent(attrName, new ArrayList<>());
		// if (map.containsKey(attrName)) {
		// map.get(attrName).add(new SaleVoWihtSkuIds(attrValues, skuIds));
		// }
		// // vo.add(new PmsSkuItemSaleAttrVo(attrName, attrValues, skuIds));
		// }
		// for (var entry : map.entrySet()) {
		// vo.add(new PmsSkuItemSaleAttrVo(entry.getKey(), entry.getValue()));
		// // System.out.println(entry.getKey() + "/" + entry.getValue());
		// }
		// // List<PmsSkuItemSaleAttrVo> testt = new ArrayList<>(map.entrySet());
		// // foreach(SaleVoWihtSkuIds test: map.values()){

		// // }
		// for (PmsSkuItemSaleAttrVo v : vo) {
		// System.out.println(v.getAttrName() + " " + v.getAttrValues());
		// }
		// skuItemVo.setSaleAttr(vo);

		// 阻塞等待，让主线程等待任务完成，一定要使用.get()方法
		CompletableFuture.allOf(spuDescriptionFuture, spuSpecificationFuture, spuSaleAttributeFuture, skuImageFuture)
				.get();
		return skuItemVo;
	}

	public Page<PmsSkuInfo> searchSkuByUserInputedText(Pageable pageable, String userInputedText, Long catalog3Id) {
		Page<PmsSkuInfo> list = null;
		if (!userInputedText.equals(" ")) {
			System.out.println("String nothing");
			list = repository.searchSkusBySku_NameInputedByUser(pageable, userInputedText);
		} else if (catalog3Id != 0) {
			System.out.println("String gothing");
			list = repository.searchSkusBycatalog3Id(pageable, catalog3Id);
		}
		return list;
	}

	public List<PmsSkuInfoDTO> searchALLSkusByUserInputedText(String userInputedText, Long catalog3Id) {
		List<PmsSkuInfo> infos = repository.searchALLSkusByUserInputedText(userInputedText);
		if (!userInputedText.equals(" ")) {
			System.out.println("String nothing");
			infos = repository.searchALLSkusByUserInputedText(userInputedText);
		} else if (catalog3Id != 0) {
			System.out.println("String gothing");
			infos = repository.searchALLSkusByCatalog3Id(catalog3Id);
		}
		return entityListToDtoList(infos);
	}
}

// -----------------------------------------------------------------------------------------
// Specific "finders"
// -----------------------------------------------------------------------------------------
/***
 * public List<PmsSkuInfoDTO> findByTitle(String title) {
 * logger.debug("findByTitle({})", title);
 * // List<PmsSkuInfo> list = repository.findByTitle(title);
 * List<PmsSkuInfo> list = repository.findByTitleContaining(title);
 * return entityListToDtoList(list);
 * }
 * 
 * public List<PmsSkuInfoDTO> findByPrice(BigDecimal price) {
 * logger.debug("findByPrice({})", price);
 * // List<PmsSkuInfo> list = repository.findByTitle(title);
 * List<PmsSkuInfo> list = repository.findByPrice(price);
 * return entityListToDtoList(list);
 * }
 * 
 * public List<PmsSkuInfoDTO> findByTitleAndPrice(String title, BigDecimal
 * price) {
 * logger.debug("findByTitleAndPrice({}, {})", title, price);
 * List<PmsSkuInfo> list = repository.findByTitleContainingAndPrice(title,
 * price);
 * return entityListToDtoList(list);
 * }
 ***/
